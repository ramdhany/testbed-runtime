import java.util.*;
import java.io.*;
import org.joda.time.DateTime;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import eu.wisebed.testbed.api.rs.v1.ConfidentialReservationData;
import eu.wisebed.testbed.api.rs.v1.RS;
import eu.wisebed.testbed.api.snaa.v1.SNAA;
import eu.wisebed.testbed.api.snaa.v1.AuthenticationTriple;
import eu.wisebed.testbed.api.snaa.v1.SecretAuthenticationKey;

    //--------------------------------------------------------------------------
	//Configuration
    //--------------------------------------------------------------------------
		String localControllerEndpoint = "http://localhost:6060/controller";

        String reservationEndpoint = "http://localhost:30001/rs";
        String snaaEndpoint = "http://localhost:20001/snaa";
        String sessionManagementEndpoint = "http://localhost:10001/sessions";

        String htmlLogFile = "federationdemo.html";
        
        Triple[] authenticationTriples = new Triple[] {
              new Triple("testbeduzl1", "testbeduzl1", "urn:wisebed:uzl1:"),
              new Triple("testbeduzl2", "testbeduzl2", "urn:wisebed:uzl2:")
        };
        
		List nodes = Arrays.asList(new Object[]{
              "urn:wisebed:uzl1:1",
              "urn:wisebed:uzl2:2"
        });
		
        DateTime reserveFrom  = new DateTime(); //now
        DateTime reserveUntil = new DateTime(reserveFrom.plusHours(3)); //now + 3 hours

		System.out.println("Please press any key to continue with AUTHENTICATION....");
		System.in.read();

    //--------------------------------------------------------------------------
    //Authentication
    //--------------------------------------------------------------------------
		List authenticationData = new ArrayList();
        for(int i = 0; i < authenticationTriples.length; ++i) {
            AuthenticationTriple a = new AuthenticationTriple();
            a.setUsername(authenticationTriples[i].first);
            a.setPassword(authenticationTriples[i].second);
            a.setUrnPrefix(authenticationTriples[i].third);
    		authenticationData.add(a);        
        }
        
        SNAA snaa = SNAAServiceHelper.getSNAAService(snaaEndpoint);
		List secretAuthKeys = snaa.authenticate(authenticationData);
        log.debug("Authenticated: " + StringUtils.jaxbMarshal(secretAuthKeys));

        System.out.println("Please press any key to continue with RESERVATION....");
        System.in.read();
        
    //--------------------------------------------------------------------------
	//Reservation
    //--------------------------------------------------------------------------
        RS rs = RSServiceHelper.getRSService(reservationEndpoint);
			
        ConfidentialReservationData res = new ConfidentialReservationData();
        res.setFrom(DatatypeFactory.newInstance().newXMLGregorianCalendar(reserveFrom.toGregorianCalendar()));
        res.setTo(DatatypeFactory.newInstance().newXMLGregorianCalendar(reserveUntil.toGregorianCalendar()));
        //Todo: Set authenticationData
        res.getNodeURNs().addAll(nodes);
        
        reservation = rs.makeReservation(helper.copySnaaToRs(secretAuthKeys), res);
        log.debug("Got a reservation: " + StringUtils.jaxbMarshal(reservation));

        System.out.println("Please press any key to continue with EXPERIMENTATION....");
        System.in.read();
        
    //--------------------------------------------------------------------------
    //Create a local controller
    //--------------------------------------------------------------------------
        AsyncJobObserver jobs = new AsyncJobObserver(20, TimeUnit.SECONDS); //Timeout for join until unfinished jobs are removed
        HtmlWriter htmlLogWriter = null;
        
        if( htmlLogFile != null ) {
        	htmlLogWriter = new HtmlWriter(new FileWriter(new File(htmlLogFile), false));
        	jobs.addListener(htmlLogWriter);
        }
        
        public class MyController implements Controller{
        	HtmlWriter htmlLogWriter;

        	MyController(HtmlWriter htmlLogWriter) {
        		this.htmlLogWriter = htmlLogWriter;
        	}
        	
            public void receive(Message msg) {
            	String s = helper.toString(msg);
                log.debug("Received message: " + s);
                if( htmlLogWriter != null )
                	htmlLogWriter.receiveMessage(msg);
            }
        
            public void receiveStatus(RequestStatus status) {
                jobs.receive(status);
            }
            
        }
		
        DelegatingController delegator = new DelegatingController(new MyController(htmlLogWriter));
        delegator.publish(localControllerEndpoint);
        
    //--------------------------------------------------------------------------
	// Get WSN API instance URL --> call getInstance()
	//--------------------------------------------------------------------------
		SessionManagement sm = WSNServiceHelper.getSessionManagementService(sessionManagementEndpoint);

		log.debug("Using the following parameters for get instance: " + StringUtils.jaxbMarshal(helper.copyRsToWsn(reservation)) + ", " + localControllerEndpoint);
		String wsnApiEndpointUzl = smUzl.getInstance(helper.copyRsToWsn(reservation), localControllerEndpoint);
		
		WSN wsn = WSNServiceHelper.getWSNService(wsnApiEndpoint);
	
	//--------------------------------------------------------------------------
	// Experiment control using the WSN API
	//--------------------------------------------------------------------------

        for (int i=0; i<1000; i++) {
        	jobs.submit( new Job("nodes alive test", wsn.areNodesAlive(nodes), nodes, Job.JobType.areNodesAlive) );
        }
        jobs.join();
		
        //jobs.submit( new Job("reset nodes", wsn.resetNodes(nodes), nodes, Job.JobType.resetNodes) );
        //jobs.join();
        

	//--------------------------------------------------------------------------
	// Clean up and exit
	//--------------------------------------------------------------------------
        log.debug("Done. Exiting.");
        Thread.sleep(1000);

        if( htmlLogWriter != null ) {
        	htmlLogWriter.close();
        }
        System.exit(0);
        