import java.util.*;
import java.nio.*;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import eu.wisebed.testbed.api.rs.RSServiceHelper;
import eu.wisebed.testbed.api.rs.v1.PublicReservationData;
import eu.wisebed.testbed.api.rs.v1.RS;

import eu.wisebed.testbed.api.snaa.v1.SNAA;
import eu.wisebed.testbed.api.snaa.v1.AuthenticationTriple;
import eu.wisebed.testbed.api.snaa.v1.SecretAuthenticationKey;
import eu.wisebed.testbed.api.snaa.helpers.SNAAServiceHelper;

import eu.wisebed.testbed.api.wsn.WSNServiceHelper;
import eu.wisebed.testbed.api.wsn.v22.*;

import de.uniluebeck.itm.tr.util.*;
import de.itm.uniluebeck.tr.wiseml.WiseMLHelper;

import de.uniluebeck.itm.wisebed.cmdlineclient.*;



//--------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------

    // Endpoint URL of local controller instance, the testbed will use this URL to send us node outputs
    String localControllerEndpointURL	= "http://" + InetAddress.getLocalHost().getCanonicalHostName() + ":8089/controller";

    // Authentication credentials and other relevant information used again and again as method parameters
    String urnPrefix 					= "urn:wisebed:uzl1:";
    String username						= "testbeduzl1";
    String password						= "testbeduzl1";
    
    // Endpoint URLs of Authentication (SNAA), Reservation (RS) and Experimentation (iWSN) services
    String snaaEndpointURL 				= "http://wisebed.itm.uni-luebeck.de:8890/snaa";
    String rsEndpointURL				= "http://wisebed.itm.uni-luebeck.de:8889/rs";
	String sessionManagementEndpointURL	= "http://wisebed.itm.uni-luebeck.de:8888/sessions";

	// Retrieve Java proxies of the endpoint URLs above
	SNAA authenticationSystem 			= SNAAServiceHelper.getSNAAService(snaaEndpointURL);
	RS reservationSystem				= RSServiceHelper.getRSService(rsEndpointURL);
	SessionManagement sessionManagement = WSNServiceHelper.getSessionManagementService(sessionManagementEndpointURL); 



//--------------------------------------------------------------------------
// Application logic
//--------------------------------------------------------------------------

	//--------------------------------------------------------------------------
	// 1st step: authenticate with the system
	//--------------------------------------------------------------------------

	// build argument types
	AuthenticationTriple credentials = new AuthenticationTriple();
	credentials.setUrnPrefix(urnPrefix);
	credentials.setUsername(username);
	credentials.setPassword(password);
	List credentialsList = new ArrayList();
	credentialsList.add(credentials);

	// do the authentication
	log.info("Authenticating...");
	List secretAuthenticationKeys = authenticationSystem.authenticate(credentialsList);
	log.info("Successfully authenticated!");




    //--------------------------------------------------------------------------
    // 2nd step: reserve some nodes (here: all nodes)
    //--------------------------------------------------------------------------

	// retrieve the node URNs of all iSense nodes
	String serializedWiseML = sessionManagement.getNetwork();
	List iSenseNodeURNs = WiseMLHelper.getNodeUrns(serializedWiseML, new String[] {});
	log.info("Retrieved the node URNs of all iSense nodes: {}", Arrays.toString(iSenseNodeURNs.toArray()));

	// create reservation request data to reserve all iSense nodes for 10 minutes
	ConfidentialReservationData reservationData = helper.generateConfidentialReservationData(
			iSenseNodeURNs,
			new Date(), 10, TimeUnit.MINUTES,
			urnPrefix, username
	);

	// do the reservation
	log.info("Trying to reserve the following nodes: {}", iSenseNodeURNs);
    List secretReservationKeys = reservationSystem.makeReservation(
    		helper.copySnaaToRs(secretAuthenticationKeys),
    		reservationData
    );
    log.info("Successfully reserved nodes: {}", iSenseNodeURNs);




	//--------------------------------------------------------------------------
	// 3rd step: start local controller instance
	//--------------------------------------------------------------------------

	AsyncJobObserver jobs = new AsyncJobObserver(1, TimeUnit.MINUTES); //Timeout for join until unfinished jobs are removed

	HtmlWriter htmlLogWriter = null;
	String htmlLogFile = "log.html";

	if( htmlLogFile != null ) {
		htmlLogWriter = new HtmlWriter(new FileWriter(new File(htmlLogFile), false));
		jobs.addListener(htmlLogWriter);
	}
        
	public class MyController implements Controller{
		HtmlWriter htmlLogWriter;

		MyController(HtmlWriter htmlLogWriter) {
			this.htmlLogWriter = htmlLogWriter;
		}
        	
		public void receive(Message msg) {

			String s = helper.toString(msg);
			log.debug("Received message: " + s);

			if( htmlLogWriter != null )
				htmlLogWriter.receiveMessage(msg);
			}
        
			public void receiveStatus(RequestStatus status) {
				jobs.receive(status);
			}
		}

	DelegatingController delegator = new DelegatingController(new MyController(htmlLogWriter));
	delegator.publish(localControllerEndpointURL);
	log.info("Local controller published on url: {}", localControllerEndpointURL);



	//--------------------------------------------------------------------------
	// 4th step: get WSN API instance URL --> call getInstance() on Session Management service
	//--------------------------------------------------------------------------

	log.debug("Using the following parameters for calling getInstance(): {}, {}",
			StringUtils.jaxbMarshal(helper.copyRsToWsn(secretReservationKeys)),
			localControllerEndpointURL
	);

	String wsnEndpointURL = sessionManagement.getInstance(
			helper.copyRsToWsn(secretReservationKeys),
			localControllerEndpointURL
	);

	log.info("Got an WSN instance URL, endpoint is: {}", wsnEndpointURL);
	WSN wsn = WSNServiceHelper.getWSNService(wsnEndpointURL);



	//--------------------------------------------------------------------------
	// Steps 5..n: Experiment control using the WSN API
	//--------------------------------------------------------------------------
    log.info("Starting experiments...");

	Thread.sleep(2000);

	log.info("Checking if nodes are alive.");
	jobs.submit(new Job("nodes alive test", wsn.areNodesAlive(iSenseNodeURNs), iSenseNodeURNs, Job.JobType.areNodesAlive));
	jobs.join(5000);

	// now flash a program to the nodes
	log.info("Flash nodes with iSerAerial program.");

	List programIndices = new ArrayList();
	for (int i=0; i<iSenseNodeURNs.size(); i++) {
		programIndices.add(0);
	}

	List programs = new ArrayList();
	programs.add(helper.readProgram(
			"scripts/various/WISEBEDApplication.jn5139r1.bin",
			"iSerAerial",
			"",
			"iSense",
			"1.0"
	));
	jobs.submit(new Job(
		"flash nodes",
		wsn.flashPrograms(iSenseNodeURNs, programIndices, programs),
		iSenseNodeURNs,
		Job.JobType.flashPrograms
	));
	jobs.join();

	System.out.println("Demonstration done. Please press any key to quit...");
	System.in.read();

    //--------------------------------------------------------------------------
   	// Steps n+1: Shutdown WSN API endpoint (optional)
   	//--------------------------------------------------------------------------
   	log.info("Done running experiments. Now freeing WSN service instance...");
	sessionManagement.free(helper.copyRsToWsn(secretReservationKeys));

	log.info("Freed WSN service instance. Shutting down...");
	System.exit(0);
