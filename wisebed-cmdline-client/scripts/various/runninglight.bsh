import java.util.*;
import java.nio.*;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import eu.wisebed.testbed.api.wsn.WSNServiceHelper;
import eu.wisebed.testbed.api.rs.RSServiceHelper;
import eu.wisebed.testbed.api.rs.v1.PublicReservationData;
import eu.wisebed.testbed.api.rs.v1.RS;
import eu.wisebed.testbed.api.snaa.v1.SNAA;
import eu.wisebed.testbed.api.snaa.helpers.SNAAServiceHelper;
import eu.wisebed.testbed.api.snaa.v1.AuthenticationTriple;
import eu.wisebed.testbed.api.snaa.v1.SecretAuthenticationKey;
import de.uniluebeck.itm.wisebed.cmdlineclient.*;
import eu.wisebed.testbed.api.wsn.v22.*;
import de.uniluebeck.itm.tr.util.*;

//--------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------

	//This is the endpoint of our local 
		String localControllerEndpoint = "http://opium.itm.uni-luebeck.de:8089/testcontroller";
	           
	//The endpoint of the Session Management 
		String sessionManamentEndpointUzl = "http://testbeduzl13.itm.uni-luebeck.de:8888/sessions";
	
//--------------------------------------------------------------------------
// Application logic
//--------------------------------------------------------------------------
	
		secretAuthKeysUzl = helper.generateFakeSNAAAuthentication("urn:wisebed:uzl:","dummy-user","dummy-secret-authentication-key");
		reservation = helper.generateFakeReservationKeys("urn:wisebed:uzl:","dummy-secret-reservation-key");

	//--------------------------------------------------------------------------
	// Start local controller instance
	//--------------------------------------------------------------------------
        AsyncJobObserver jobs = new AsyncJobObserver(10, TimeUnit.SECONDS); //Timeout for join until unfinished jobs are removed

        HtmlWriter htmlLogWriter = null;
        String htmlLogFile = "log.html";

        if( htmlLogFile != null ) {
        	htmlLogWriter = new HtmlWriter(new FileWriter(new File(htmlLogFile), false));
        	jobs.addListener(htmlLogWriter);
        }
        
        public class MyController implements Controller{
        	HtmlWriter htmlLogWriter;

        	MyController(HtmlWriter htmlLogWriter) {
        		this.htmlLogWriter = htmlLogWriter;
        	}
        	
            public void receive(Message msg) {
            	String s = helper.toString(msg);
                log.debug("Received message: " + s);
                if( htmlLogWriter != null )
                	htmlLogWriter.receiveMessage(msg);
            }
        
            public void receiveStatus(RequestStatus status) {
                jobs.receive(status);
            }
            
        }
		
        DelegatingController delegator = new DelegatingController(new MyController(htmlLogWriter));
        delegator.publish(localControllerEndpoint);
		log.info("Local controller published on url: " + localControllerEndpoint);

	//--------------------------------------------------------------------------
	// Get UZL WSN API instance URL --> call getInstance()
	//--------------------------------------------------------------------------
		SessionManagement smUzl = WSNServiceHelper.getSessionManagementService(sessionManamentEndpointUzl);
			
		log.debug("Using the following parameters for get instance: " + StringUtils.jaxbMarshal(helper.copyRsToWsn(reservation)) + ", " + localControllerEndpoint);
		String wsnApiEndpointUzl = smUzl.getInstance(helper.copyRsToWsn(reservation), localControllerEndpoint);

		log.info("Got an UZL WSN instance URL, endpoint is: " + wsnApiEndpointUzl);
		WSN wsnUzl = WSNServiceHelper.getWSNService(wsnApiEndpointUzl);
	
	//--------------------------------------------------------------------------
	// Experiment control using the WSN API
	//--------------------------------------------------------------------------

		// wait to let the backend be fully set up
		log.info("Waiting 6 seconds for the testbed to set itself up");
		Thread.sleep(6000);
        
        String [] uzlnodes = new String[] 
        {
			"urn:wisebed:uzl:501",
			"urn:wisebed:uzl:502",
			"urn:wisebed:uzl:503",
			"urn:wisebed:uzl:504",
			"urn:wisebed:uzl:505",
			"urn:wisebed:uzl:506",
			"urn:wisebed:uzl:507",
			"urn:wisebed:uzl:508",
			"urn:wisebed:uzl:509",
			"urn:wisebed:uzl:510"
        };
        
		/*
        jobs.submit( new Job("reset nodes", wsnUzl.resetNodes(Arrays.asList(uzlnodes)), Arrays.asList(uzlnodes), Job.JobType.resetNodes) );
        jobs.join();
        
        Thread.sleep(5000);
		*/
        

		for (int loop=0; loop<Integer.MAX_VALUE; loop++) {
		for (int nodeIndex=0; nodeIndex<uzlnodes.length; nodeIndex++) {

        	String node = uzlnodes[nodeIndex];
			
			log.info("+++ Switching on node " + (nodeIndex+1));
        	// switch on node

      		ByteBuffer buffer = ByteBuffer.allocate(26);
      		buffer.put(new byte[] {
                0xb,  // VIRTUAL_LINK_MESSAGE
                0x00, // REQUEST_ID
                0x00, // RSSI
                0x00, // LQI
                0x05  // PAYLOAD_LENGTH
      		}, 0, 5);
      		buffer.putLong(501 + nodeIndex);
      		buffer.put(new byte[] {
				0x00, // SOURCE_BYTE 0
				0x00, // SOURCE_BYTE 1
				0x00, // SOURCE_BYTE 2
				0x00, // SOURCE_BYTE 3
				0x00, // SOURCE_BYTE 4
				0x00, // SOURCE_BYTE 5
				0x01, // SOURCE_BYTE 6
				0x91, // SOURCE_BYTE 7
				0x91, // PAYLOAD ...
				0x21, // PAYLOAD ...
				0x15 // PAYLOAD ...
      		}, 0, 11);
      		buffer.put((byte)(nodeIndex+1)); // DESTINATION_NODE
      		buffer.put((byte) 0xFF); // LAMP ON

        	BinaryMessage binaryMessage = new BinaryMessage();
			binaryMessage.setBinaryType((byte) 10);
			binaryMessage.setBinaryData(buffer.array());

			Message message = new Message();
			message.setSourceNodeId("urn:wisebed:tubs:401");
			message.setTimestamp(DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar) GregorianCalendar.getInstance()));
			message.setBinaryMessage(binaryMessage);

			wsnUzl.send(Arrays.asList(new String[] {node}), message);
			//jobs.submit( new Job("switch on node 501", wsnUzl.send(Arrays.asList(new String[] {"urn:wisebed:uzl:501"}), message), Arrays.asList(new String[]{"urn:wisebed:uzl:501"}), Job.JobType.send));
			//jobs.join();


        	// wait for 1000ms
        	Thread.sleep(1000);

			log.info("--- Switching off node " + (nodeIndex+1));
        	// switch off node

			ByteBuffer buffer = ByteBuffer.allocate(26);
      		buffer.put(new byte[] {
                0xb,  // VIRTUAL_LINK_MESSAGE
                0x00, // REQUEST_ID
                0x00, // RSSI
                0x00, // LQI
                0x05 // PAYLOAD_LENGTH
      		}, 0, 5);
      		buffer.putLong(501+nodeIndex);
      		buffer.put(new byte[] {
				0x00, // SOURCE_BYTE 0
				0x00, // SOURCE_BYTE 1
				0x00, // SOURCE_BYTE 2
				0x00, // SOURCE_BYTE 3
				0x00, // SOURCE_BYTE 4
				0x00, // SOURCE_BYTE 5
				0x01, // SOURCE_BYTE 6
				0x91, // SOURCE_BYTE 7
				0x91, // PAYLOAD ...
				0x21, // PAYLOAD ...
				0x15 // PAYLOAD ...
      		}, 0, 11);
      		buffer.put((byte)(nodeIndex+1)); // DESTINATION_NODE
      		buffer.put((byte) 0x00); // LAMP OFF

        	BinaryMessage binaryMessage = new BinaryMessage();
			binaryMessage.setBinaryType((byte) 10);
			binaryMessage.setBinaryData(buffer.array());

			Message message = new Message();
			message.setSourceNodeId("urn:wisebed:tubs:401");
			message.setTimestamp(DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar) GregorianCalendar.getInstance()));
			message.setBinaryMessage(binaryMessage);

			wsnUzl.send(Arrays.asList(new String[] {node}), message);

        }
        }
	
	
		
