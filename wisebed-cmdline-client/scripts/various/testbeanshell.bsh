import java.util.*;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import eu.wisebed.testbed.api.wsn.WSNServiceHelper;
import eu.wisebed.testbed.api.rs.RSServiceHelper;
import eu.wisebed.testbed.api.rs.v1.PublicReservationData;
import eu.wisebed.testbed.api.rs.v1.RS;
import eu.wisebed.testbed.api.snaa.v1.SNAA;
import eu.wisebed.testbed.api.snaa.helpers.SNAAServiceHelper;
import eu.wisebed.testbed.api.snaa.v1.AuthenticationTriple;
import eu.wisebed.testbed.api.snaa.v1.SecretAuthenticationKey;
import de.uniluebeck.itm.wisebed.cmdlineclient.*;
import eu.wisebed.testbed.api.wsn.v22.*;
import de.uniluebeck.itm.tr.util.*;

//--------------------------------------------------------------------------
// Documentation of the available API functions
//--------------------------------------------------------------------------

	//--------------------------------------------------------------------------
	//SNAAServiceHelper
	//--------------------------------------------------------------------------
	//	 SNAA getSNAAService(String endpointUrl)
	
	//--------------------------------------------------------------------------
	//SNAA
	//--------------------------------------------------------------------------
	//	java.util.List<SecretAuthenticationKey> 	authenticate(java.util.List<AuthenticationTriple> authenticationData)
	//	boolean 	isAuthorized(java.util.List<SecretAuthenticationKey> authenticationData, Action action)
	
	//	Type: AuthenticationTriple
	//		 java.lang.String 	getPassword()          Gets the value of the password property.
	//		 java.lang.String 	getUrnPrefix()          Gets the value of the urnPrefix property.
	//		 java.lang.String 	getUsername()          Gets the value of the username property.
	//		 void 	setPassword(java.lang.String value)          Sets the value of the password property.
	//		 void 	setUrnPrefix(java.lang.String value)          Sets the value of the urnPrefix property.
	//		 void 	setUsername(java.lang.String value)          Sets the value of the username property.
	
	//--------------------------------------------------------------------------
	//RSServiceHelper
	//--------------------------------------------------------------------------
	//	RS getRSService(String endpointUrl)
	
	//--------------------------------------------------------------------------
	//RS
	//--------------------------------------------------------------------------
	//	void deleteReservation(java.util.List<SecretReservationKey> secretReservationKeys)
	//	java.util.List<ConfidentialReservationData> 	getReservation(java.util.List<SecretReservationKey> secretReservationKeys)
	//	java.util.List<PublicReservationData> 	getReservations(javax.xml.datatype.XMLGregorianCalendar from, javax.xml.datatype.XMLGregorianCalendar to)
	//	java.util.List<SecretReservationKey> 	makeReservation(java.util.List<SecretAuthenticationKey> authenticationData, PublicReservationData reservation)
	          
	//	Type: PublicReservationData
	//		javax.xml.datatype.XMLGregorianCalendar 	getFrom() Gets the value of the from property.
	//		java.util.List<java.lang.String> 	getNodeURNs() Gets the value of the nodeURNs property.
	//		javax.xml.datatype.XMLGregorianCalendar 	getTo() Gets the value of the to property.
	//		void 	setFrom(javax.xml.datatype.XMLGregorianCalendar value) Sets the value of the from property.
	//		void 	setNodeURNs(java.util.List<java.lang.String> nodeURNs) 
	//		void 	setTo(javax.xml.datatype.XMLGregorianCalendar value)  Sets the value of the to property.
	
	//	Type: PublicReservationData (extends PublicReservationData)
	//		java.util.List<User> 	getUsers()
	//		void 	setUsers(java.util.List<User> users)
	//		java.lang.String 	toString()
	          
	//	Type: SecretReservationKey 
	//		java.lang.String 	getSecretReservationKey() Gets the value of the secretReservationKeys property.
	//		java.lang.String 	getUrnPrefix() Gets the value of the urnPrefix property.
	//		void 	setSecretReservationKey(java.lang.String value) Sets the value of the secretReservationKeys property.
	//		void 	setUrnPrefix(java.lang.String value) Sets the value of the urnPrefix property.
	
	//Type: User
	//		java.lang.String 	getUrnPrefix()
	//		java.lang.String 	getUsername()
	//		void 	setUrnPrefix(java.lang.String urnPrefix)
	//		void 	setUsername(java.lang.String username) 
	
	//--------------------------------------------------------------------------
	//WSNServiceHelper
	//--------------------------------------------------------------------------
	//	SessionManagement getSessionManagementService(String endpointUrl)
	//	Controller getControllerService(String endpointUrl)
	//	WSN getWSNService(String endpointUrl)
	
	//--------------------------------------------------------------------------
	//SessionManagement
	//--------------------------------------------------------------------------
	//	 void 	free(java.util.List<SecretReservationKey> secretReservationKeys)
	//	 java.lang.String 	getInstance(GetInstance parameters)
	//	 java.lang.String 	getNetwork()
	//
	//	GetInstance Type
	//		 java.lang.String 	getController() Gets the value of the controller property.
	//		 java.util.List<SecretReservationKey> 	getSecretReservationKey() Gets the value of the secretReservationKeys property.
	//		 void 	setController(java.lang.String value)  Sets the value of the controller property.
	//
	//	SecretReservationKey Type
	//		java.lang.String 	getSecretReservationKey() Gets the value of the secretReservationKeys property.
	//		java.lang.String 	getUrnPrefix() Gets the value of the urnPrefix property.
	//		void 	setSecretReservationKey(java.lang.String value) Sets the value of the secretReservationKeys property.
	//		void 	setUrnPrefix(java.lang.String value) Sets the value of the urnPrefix property.
	
	//--------------------------------------------------------------------------
	//Controller
	//--------------------------------------------------------------------------
	//	 void 	receive(Message msg)
	//	 void 	receiveStatus(RequestStatus status)
	
	//--------------------------------------------------------------------------
	//WSN
	//--------------------------------------------------------------------------
	//	 java.lang.String 	areNodesAlive(java.util.List<java.lang.String> nodes)
	//	 java.lang.String 	defineNetwork(java.lang.String newNetwork)
	//	 java.lang.String 	describeCapabilities(java.lang.String capability)
	//	 java.lang.String 	destroyVirtualLink(java.lang.String sourceNode, java.lang.String targetNode)
	//	 java.lang.String 	disableNode(java.lang.String node)
	//	 java.lang.String 	disablePhysicalLink(java.lang.String nodeA, java.lang.String nodeB)
	//	 java.lang.String 	enableNode(java.lang.String node)
	//	 java.lang.String 	enablePhysicalLink(java.lang.String nodeA, java.lang.String nodeB)
	//	 java.lang.String 	flashPrograms(java.util.List<java.lang.String> nodeIds, java.util.List<java.lang.Integer> programIndices, java.util.List<Program> programs)
	//	 java.util.List<java.lang.String> 	getFilters()
	//	 java.util.List<java.lang.String> 	getNeighbourhood(java.lang.String node)
	//	 java.lang.String 	getNetwork()
	//	 java.lang.String 	getPropertyValueOf(java.lang.String node, java.lang.String propertyName)
	//	 java.lang.String 	getVersion()
	//	 java.lang.String 	resetNodes(java.util.List<java.lang.String> nodes)
	//	 java.lang.String 	send(java.util.List<java.lang.String> nodeIds, Message message)
	//	 java.lang.String 	setStartTime(javax.xml.datatype.XMLGregorianCalendar time)
	//	 java.lang.String 	setVirtualLink(java.lang.String sourceNode, java.lang.String targetNode, java.lang.String remoteServiceInstance, java.util.List<java.lang.String> parameters, java.util.List<java.lang.String> filters)
	

//--------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------

	//Authentication
		boolean doAuthentication = false;
		
		String snaaEndpoint = "http://127.0.0.1:8080/snaa/dummy1";
		
		AuthenticationTriple authData1 = new AuthenticationTriple();
		authData1.setUsername("xxx");
		authData1.setPassword("yyy");
		authData1.setUrnPrefix("urn:wisebed:uzl");
	
		List authenticationData = new ArrayList();
		authenticationData.add(authData1);

	//Reservation
		boolean doReservation = false;
		
		String reservationEndpoint = "http://127.0.0.1:8080/rs/";
		
		List reservedUrns = Arrays.asList(new Object[]{"urn:wisebed:uzl:node1", "urn:wisebed:uzl:node1"});
		
		//GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute) 
		GregorianCalendar reserveFrom = new GregorianCalendar(2010, 05, 06, 14, 00);
		GregorianCalendar reserveTo = new GregorianCalendar(2010, 05, 06, 18, 00);
	
	
	//This is the endpoint of our local 
		String localControllerEndpoint = "http://127.0.0.1:8089/testcontroller";
	           
	//The endpoint of the Session Management
		String sessionManamentEndpoint = "http://127.0.0.1:8080/sessions/";
	
//--------------------------------------------------------------------------
// Application logic
//--------------------------------------------------------------------------
	
		//--------------------------------------------------------------------------
		//Authenticate
		//--------------------------------------------------------------------------
		List secretAuthKeys = null;
		if(doAuthentication)
		{
			log.debug("Obtaining SNAA API instance client for url: " + snaaEndpoint);
			SNAA snaa = SNAAServiceHelper.getSNAAService(snaaEndpoint);
			
			log.debug("Calling authenticate with the following data:  " + StringUtils.jaxbMarshal(authenticationData));
			secretAuthKeys = snaa.authenticate(authenticationData); 
		}
		else
		{
			secretAuthKeys = helper.generateFakeSNAAAuthentication("tubs:","dummy-user","dummy-secret-authentication-key");
		}

	//--------------------------------------------------------------------------
	//Reserve
	//--------------------------------------------------------------------------
		List reservation = null;
		if ( doReservation ) 
		{
			log.debug("Obtaining RS instance client for url: " + reservationEndpoint);
			RS rs = RSServiceHelper.getRSService(reservationEndpoint);
			
			PublicReservationData res = new PublicReservationData();
			res.setFrom(DatatypeFactory.newInstance().newXMLGregorianCalendar(reserveFrom));
			res.setTo(DatatypeFactory.newInstance().newXMLGregorianCalendar(reserveTo));
			res.setNodeURNs(reservedUrns);
			
			reservation = rs.makeReservation(helper.copySnaaToRs(secretAuthKeys), res);
		}
		else
		{
			log.debug("Using fake reservation data");
			reservation = helper.generateFakeReservationKeys("tubs:","dummy-secret-reservation-key");
		}
		
	//--------------------------------------------------------------------------
	// Start local controller instance
	//--------------------------------------------------------------------------
		Map pendingRequests = Collections.synchronizedMap(new HashMap());
		Object notifier = new Object();
		
		//Create a local controller that only dumps the received messages to system out
			public class MyController implements Controller{
				
				public void receive(Message msg) {
					log.info("Received message: " + StringUtils.jaxbMarshal(msg));
				}
			
				public void receiveStatus(RequestStatus status) {
					log.info("Received status update: " + StringUtils.jaxbMarshal(status));
					boolean remove = true;
					for( Status s : status.getStatus() )
					{
						Integer i = pendingRequests.get(status.getRequestId());
						int doneIfValue = 1;
						if ( i != null)
							doneIfValue = i.intValue();
						
						if( s.getValue() == doneIfValue || s.getValue() < 0 )
						{
							log.info("Progress["+s.getValue()+"] of nodeId" + s.getNodeId() + ", message" + s.getMsg());
						} 
						else 
						{
							log.debug("Progress["+s.getValue()+"] not done, not removing it. nodeId" + s.getNodeId() + ", message" + s.getMsg());
							remove = false;
						}						
					}
					
					if( remove )
					{
						log.debug("Removing done request: " + status.getRequestId());
						pendingRequests.remove(status.getRequestId());
						synchronized(notifier) { notifier.notifyAll(); }
					}
				}
				
			}
		
		//Create a local controller web service instance an publish it
			DelegatingController delegator = new DelegatingController(new MyController());
			delegator.publish(localControllerEndpoint);
			log.info("Local controller published on url: " + localControllerEndpoint);
	
	//--------------------------------------------------------------------------
	// Get WSN API instance URL --> call getInstance()
	//--------------------------------------------------------------------------
		SessionManagement sm = WSNServiceHelper.getSessionManagementService(sessionManamentEndpoint);
		
		log.debug("Using the following parameters for get instance: " + StringUtils.jaxbMarshal(helper.copyRsToWsn(reservation)) + ", " + localControllerEndpoint);
		String wsnApiEndpoint = smUzl.getInstance(helper.copyRsToWsn(reservation), localControllerEndpoint);

		log.info("Got an WSN instance URL, endpoint is: " + wsnApiEndpoint);
		WSN wsn = WSNServiceHelper.getWSNService(wsnApiEndpoint);
	
	//--------------------------------------------------------------------------
	// Experiment control using the WSN API
	//--------------------------------------------------------------------------

		// wait to let the backend be fully set up
		Thread.sleep(2000);
		
		pendingRequests.put( wsn.areNodesAlive(Arrays.asList(new Object[]{"tubs:n1"})) , new Integer(1));
		pendingRequests.put( wsn.resetNodes(Arrays.asList(new Object[]{"tubs:n1"})), new Integer(1));
		
	while(pendingRequests.size() > 0) 
	{
		log.debug("Still waiting for all requests to finish (pending: "+pendingRequests.size()+")");
		synchronized(notifier) { notifier.wait(5000); }
	}
	
	
		